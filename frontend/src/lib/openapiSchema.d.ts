/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/auth/{provider}": {
    get: operations["oauth_authorization"];
  };
  "/api/auth/{provider}/callback": {
    get: operations["oauth_callback"];
  };
  "/api/v1/comments/{comment_id}": {
    get: operations["get_comment_by_id"];
    delete: operations["delete_comment_by_id"];
    patch: operations["update_comment_by_id"];
  };
  "/api/v1/schematics": {
    get: operations["search_schematics"];
    post: operations["upload_schematic"];
  };
  "/api/v1/schematics/favorites": {
    get: operations["get_favorites"];
  };
  "/api/v1/schematics/{schematic_id}": {
    get: operations["get_schematic_by_id"];
    delete: operations["delete_schematic_by_id"];
    patch: operations["update_schematic_by_id"];
  };
  "/api/v1/schematics/{schematic_id}/comments": {
    get: operations["get_comments_by_schematic"];
    post: operations["post_comment"];
  };
  "/api/v1/schematics/{schematic_id}/favorite": {
    post: operations["favorite_schematic"];
    delete: operations["unfavorite_schematic"];
  };
  "/api/v1/schematics/{schematic_id}/like": {
    delete: operations["remove_like_from_schematic"];
  };
  "/api/v1/schematics/{schematic_id}/tags": {
    get: operations["get_schematic_tags"];
    post: operations["tag_schematic_by_id"];
    delete: operations["untag_schematic_by_id"];
  };
  "/api/v1/tags": {
    get: operations["get_valid_tags"];
  };
  "/api/v1/users": {
    get: operations["current_user"];
    delete: operations["remove_current_user"];
  };
  "/api/v1/users/{user_id}/schematics": {
    get: operations["get_uploaded_schematics"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    AuthRequest: {
      code: string;
    };
    Comment: {
      /** Format: uuid */
      comment_author: string;
      comment_body: string;
      /** Format: uuid */
      comment_id: string;
      schematic_id: string;
    };
    CommentBuilder: {
      comment_body: string;
    };
    FullComment: {
      author_username: string;
      /** Format: uuid */
      comment_author: string;
      comment_body: string;
      /** Format: uuid */
      comment_id: string;
      schematic_id: string;
    };
    FullSchematic: {
      /** Format: uuid */
      author: string;
      author_avatar?: string | null;
      /** @example Rabbitminers */
      author_name: string;
      body: string;
      /**
       * Format: int64
       * @example 8
       */
      create_version_id: number;
      /** @example 0.5.1 */
      create_version_name: string;
      /**
       * Format: int64
       * @example 0
       */
      dislike_count: number;
      /**
       * Format: int64
       * @example 0
       */
      downloads: number;
      /**
       * Format: int64
       * @example 0
       */
      favorite_count: number;
      files: string[];
      /**
       * Format: int64
       * @example 4
       */
      game_version_id: number;
      /** @example 1.18.2 */
      game_version_name: string;
      images: string[];
      /**
       * Format: int64
       * @example 0
       */
      like_count: number;
      schematic_id: string;
      /** @example My schematic */
      schematic_name: string;
      tags: number[];
    };
    FullTag: {
      /** Format: int64 */
      tag_id: number;
      tag_name: string;
    };
    /** @enum {string} */
    LikeAction: "like" | "dislike";
    LikeQuery: {
      action?: components["schemas"]["LikeAction"] | null;
    };
    /** @enum {string} */
    OauthProviders: "github" | "microsoft" | "google" | "discord";
    PaginationQuery: {
      /** Format: int64 */
      limit?: number | null;
      /** Format: int64 */
      offset?: number | null;
    };
    Schematic: {
      /** Format: uuid */
      author: string;
      body: string;
      /**
       * Format: int32
       * @example 8
       */
      create_version_id: number;
      /**
       * Format: int64
       * @example 0
       */
      downloads: number;
      files: string[];
      /**
       * Format: int32
       * @example 4
       */
      game_version_id: number;
      images: string[];
      /** Format: uuid */
      schematic_id: string;
      schematic_name: string;
    };
    SchematicBuilder: {
      /**
       * Format: int32
       * @description The id of the create version of the new schematic
       *
       * @example 8
       */
      create_version: number;
      /** @description The schematic file to upload */
      files: string[];
      /**
       * Format: int32
       * @description The id of the game version of the new schematic
       *
       * @example 4
       */
      game_version: number;
      /** @description The images of the schematic to upload */
      images: string[];
      /** @description The body (description) of the schematic */
      schematic_body: string;
      /** @description The name of the new schematic */
      schematic_name: string;
    };
    SearchQuery: {
      /**
       * Format: int64
       * @description The maximum number of schematics to fetch. If this is not
       * provided it will default to 20. No more than 50 schematics
       * can be fetched at once.
       *
       * @example 20
       */
      limit?: number | null;
      /**
       * Format: int64
       * @description The page of schematics to fetch from. If this is not provided
       * it will default to page 0 (no offset).
       *
       * @example 0
       */
      offset?: number | null;
      sort?: components["schemas"]["SortBy"] | null;
      /**
       * @description The tags to fetch from, only schematics with all of these tags
       * will fetched.
       */
      tag_ids?: number[] | null;
      /**
       * @description The term to search schematics for. Both schematic names and
       * descriptions will be matched agaisnt the this term.
       *
       * @example test
       */
      term?: string | null;
    };
    /** @enum {string} */
    SortBy: "downloads" | "likes" | "created_at";
    Tags: {
      tag_names: number[];
    };
    UpdateComment: {
      comment_body?: string | null;
    };
    UpdateSchematic: {
      /**
       * Format: int32
       * @description The id of the new create version of the schematic
       *
       * @example 8
       */
      create_version?: number | null;
      /**
       * Format: int32
       * @description The id of the new game version of the schematic
       *
       * @example 4
       */
      game_version?: number | null;
      /** @description The new name for the schematic */
      schematic_name?: string | null;
    };
    UpdateUser: {
      /** @example My new username */
      username?: string | null;
    };
    User: {
      /** @example https://example.com/avatar.png */
      avatar?: string | null;
      /** @example email@email.com */
      email: string;
      /**
       * Format: int64
       * @example 7
       */
      permissions: number;
      /** Format: uuid */
      user_id: string;
      /** @example My username */
      username: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  oauth_authorization: {
    parameters: {
      path: {
        /** @description The oauth provider to authenticate with */
        provider: components["schemas"]["OauthProviders"];
      };
    };
    responses: {
      /** @description Redirecting to oauth provider */
      303: {
        headers: {
          Location?: string;
        };
        content: never;
      };
      /** @description Invalid oauth provider */
      400: {
        content: never;
      };
    };
  };
  oauth_callback: {
    parameters: {
      query: {
        /** @description Current oauth state */
        query: components["schemas"]["AuthRequest"];
      };
      path: {
        /** @description The oauth provider to authenticate with */
        provider: components["schemas"]["OauthProviders"];
      };
    };
    responses: {
      /** @description Redirecting to home page */
      303: {
        headers: {
          Location?: string;
        };
        content: never;
      };
      /** @description Invalid oauth provider */
      400: {
        content: never;
      };
      /** @description Internal server error while authorizing user */
      500: {
        content: never;
      };
    };
  };
  get_comment_by_id: {
    parameters: {
      path: {
        /** @description The id of the comment to fetch */
        comment_id: string;
      };
    };
    responses: {
      /** @description Successfully retrieved the comment */
      200: {
        content: {
          "application/json": components["schemas"]["FullComment"];
        };
      };
      /** @description A comment with that id was not found */
      404: {
        content: never;
      };
      /** @description An internal server error occurred */
      500: {
        content: never;
      };
    };
  };
  delete_comment_by_id: {
    parameters: {
      path: {
        /** @description The id of the comment to remove */
        comment_id: string;
      };
    };
    responses: {
      /** @description Successfully deleted the comment */
      200: {
        content: never;
      };
      /** @description You need to be logged in to delete a comment */
      401: {
        content: never;
      };
      /** @description You do not have permission to delete this comment */
      403: {
        content: never;
      };
      /** @description A comment with that id was not found */
      404: {
        content: never;
      };
      /** @description An internal server error occurred */
      500: {
        content: never;
      };
    };
  };
  update_comment_by_id: {
    parameters: {
      path: {
        /** @description The id of the comment to update */
        comment_id: string;
      };
    };
    /** @description The new body of the comment */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateComment"];
      };
    };
    responses: {
      /** @description Successfully updated the comment */
      200: {
        content: {
          "application/json": components["schemas"]["Schematic"];
        };
      };
      /** @description You need to be logged in to update a comment */
      401: {
        content: never;
      };
      /** @description You do not have permission to update this comment */
      403: {
        content: never;
      };
      /** @description A comment with that id was not found */
      404: {
        content: never;
      };
      /** @description An internal server error occurred */
      500: {
        content: never;
      };
    };
  };
  search_schematics: {
    parameters: {
      query: {
        /** @description The number and offset of schematics to fetch */
        query: components["schemas"]["SearchQuery"];
      };
    };
    responses: {
      /** @description Successfully retrieved the schematics */
      200: {
        content: {
          "application/json": components["schemas"]["FullSchematic"][];
        };
      };
      /** @description An internal server error occurred */
      500: {
        content: never;
      };
    };
  };
  upload_schematic: {
    /** @description Information about the new schematic */
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["SchematicBuilder"];
      };
    };
    responses: {
      /** @description Successfully uploaded the schematic */
      200: {
        content: {
          "application/json": components["schemas"]["Schematic"];
        };
      };
      /** @description You must be logged in to upload a schematic */
      401: {
        content: never;
      };
      /** @description You do not have permission to upload a schematic */
      403: {
        content: never;
      };
      /** @description An error occurred while uploading the schematic */
      500: {
        content: never;
      };
    };
  };
  get_favorites: {
    responses: {
      /** @description Successfully retrieved the schematics */
      200: {
        content: {
          "application/json": components["schemas"]["Schematic"][];
        };
      };
      /** @description You need to be logged in to view your favourite schematics */
      401: {
        content: never;
      };
      /** @description An internal server error occurred */
      500: {
        content: never;
      };
    };
  };
  get_schematic_by_id: {
    parameters: {
      path: {
        /** @description The id of the schematic to fetch */
        schematic_id: string;
      };
    };
    responses: {
      /** @description Successfully retrieved the schematic */
      200: {
        content: {
          "application/json": components["schemas"]["FullSchematic"];
        };
      };
      /** @description A schematic with that id was not found */
      404: {
        content: never;
      };
      /** @description An internal server error occurred */
      500: {
        content: never;
      };
    };
  };
  delete_schematic_by_id: {
    parameters: {
      path: {
        /** @description The id of the schematic to remove */
        schematic_id: string;
      };
    };
    responses: {
      /** @description Successfully deleted the schematic */
      200: {
        content: never;
      };
      /** @description You need to be logged in to delete a schematic */
      401: {
        content: never;
      };
      /** @description You do not have permission to delete this schematic */
      403: {
        content: never;
      };
      /** @description A schematic with that id was not found */
      404: {
        content: never;
      };
      /** @description An internal server error occurred */
      500: {
        content: never;
      };
    };
  };
  update_schematic_by_id: {
    parameters: {
      path: {
        /** @description The id of the schematic to update */
        schematic_id: string;
      };
    };
    /** @description The values to update */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateSchematic"];
      };
    };
    responses: {
      /** @description Successfully updated the schematic */
      200: {
        content: {
          "application/json": components["schemas"]["Schematic"];
        };
      };
      /** @description You need to be logged in to update a schematic */
      401: {
        content: never;
      };
      /** @description You do not have permission to update this schematic */
      403: {
        content: never;
      };
      /** @description A schematic with that id was not found */
      404: {
        content: never;
      };
      /** @description A schematic with the new name already exists */
      422: {
        content: never;
      };
      /** @description An internal server error occurred */
      500: {
        content: never;
      };
    };
  };
  get_comments_by_schematic: {
    parameters: {
      query: {
        /** @description Options to search with */
        query: components["schemas"]["SearchQuery"];
      };
      path: {
        /** @description The id of the schematic to fetch comments from */
        schematic_id: string;
      };
    };
    responses: {
      /** @description Successfully retrieved the comments */
      200: {
        content: {
          "application/json": components["schemas"]["FullComment"][];
        };
      };
      /** @description An internal server error occurred */
      500: {
        content: never;
      };
    };
  };
  post_comment: {
    parameters: {
      path: {
        /** @description The id of the schematic to comment on */
        schematic_id: string;
      };
    };
    /** @description The text of the comment */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CommentBuilder"];
      };
    };
    responses: {
      /** @description Successfully added comment to schematic */
      200: {
        content: {
          "application/json": components["schemas"]["Comment"];
        };
      };
      /** @description You must be logged in to comment */
      401: {
        content: never;
      };
      /** @description You do not have permission to comment */
      403: {
        content: never;
      };
      /** @description An error occurred while uploading the comment */
      500: {
        content: never;
      };
    };
  };
  favorite_schematic: {
    parameters: {
      path: {
        /** @description The id of the schematic to favorite */
        schematic_id: string;
      };
    };
    responses: {
      /** @description Successfully favorited the schematic */
      200: {
        content: never;
      };
      /** @description You need to be logged in to favorite a schematic */
      401: {
        content: never;
      };
      /** @description An internal server error occurred */
      500: {
        content: never;
      };
    };
  };
  unfavorite_schematic: {
    parameters: {
      path: {
        /** @description The id of the schematic to unfavorite */
        schematic_id: string;
      };
    };
    responses: {
      /** @description Successfully unfavorited the schematic */
      200: {
        content: never;
      };
      /** @description You need to be logged in to unfavorite a schematic */
      401: {
        content: never;
      };
      /** @description An internal server error occurred */
      500: {
        content: never;
      };
    };
  };
  remove_like_from_schematic: {
    parameters: {
      path: {
        /** @description The id of the comment to remove the vote from */
        schematic_id: string;
      };
    };
    responses: {
      /** @description Successfully removed the vote */
      200: {
        content: never;
      };
      /** @description You need to be logged in to remove al ike */
      401: {
        content: never;
      };
      /** @description You have not liked this schematic */
      404: {
        content: never;
      };
      /** @description An internal server error occurred */
      500: {
        content: never;
      };
    };
  };
  get_schematic_tags: {
    parameters: {
      path: {
        /** @description The id of the schematic to fetch tags from */
        schematic_id: string;
      };
    };
    responses: {
      /** @description Successfully retrieved the schematic's tags */
      200: {
        content: {
          "application/json": components["schemas"]["FullTag"][];
        };
      };
      /** @description A schematic with that id was not found */
      404: {
        content: never;
      };
      /** @description An internal server error occurred */
      500: {
        content: never;
      };
    };
  };
  tag_schematic_by_id: {
    parameters: {
      path: {
        /** @description The id of the schematic to remove */
        schematic_id: string;
      };
    };
    /** @description The new tags to apply by name */
    requestBody: {
      content: {
        "application/json": components["schemas"]["TagBody"];
      };
    };
    responses: {
      /** @description Successfully added tags to schematic */
      200: {
        content: {
          "application/json": components["schemas"]["Schematic"];
        };
      };
      /** @description You must be logged in to tag a schematic */
      401: {
        content: never;
      };
      /** @description You do not have permission to tag this schematic */
      403: {
        content: never;
      };
      /** @description An error occurred while tagging the schematic */
      500: {
        content: never;
      };
    };
  };
  untag_schematic_by_id: {
    parameters: {
      path: {
        /** @description The id of the schematic to remove tags from */
        schematic_id: string;
      };
    };
    /** @description The tags to remove from the schematic */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Tags"];
      };
    };
    responses: {
      /** @description Successfully removed the tags from the schematic */
      200: {
        content: never;
      };
      /** @description You need to be logged in to delete tags from a schematic */
      401: {
        content: never;
      };
      /** @description You do not have permission to delete tags from this schematic */
      403: {
        content: never;
      };
      /** @description A schematic with that id was not found */
      404: {
        content: never;
      };
      /** @description An internal server error occurred */
      500: {
        content: never;
      };
    };
  };
  get_valid_tags: {
    parameters: {
      query: {
        /** @description How many tags to fetch */
        query: components["schemas"]["PaginationQuery"];
      };
    };
    responses: {
      /** @description Successfully retrieved the tags */
      200: {
        content: {
          "application/json": components["schemas"]["FullTag"][];
        };
      };
      /** @description An internal server error occurred */
      500: {
        content: never;
      };
    };
  };
  current_user: {
    responses: {
      /** @description Successfully found current users */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description You must be logged in */
      401: {
        content: never;
      };
      /** @description An error occurred while authenticating the user */
      500: {
        content: never;
      };
    };
  };
  remove_current_user: {
    responses: {
      /** @description Successfully deleted current user */
      200: {
        content: never;
      };
      /** @description You must be logged in to remove your account */
      401: {
        content: never;
      };
      /** @description An error occurred removing your account */
      500: {
        content: never;
      };
    };
  };
  get_uploaded_schematics: {
    parameters: {
      query: {
        /** @description How many schematics to fetch */
        query: components["schemas"]["PaginationQuery"];
      };
      path: {
        /** @description The id of the user to get the schematics from */
        user_id: string;
      };
    };
    responses: {
      /** @description Successfully retrieved the schematics */
      200: {
        content: {
          "application/json": components["schemas"]["Schematic"][];
        };
      };
      /** @description A schematic with that id was not found */
      404: {
        content: never;
      };
      /** @description An internal server error occurred */
      500: {
        content: never;
      };
    };
  };
}
