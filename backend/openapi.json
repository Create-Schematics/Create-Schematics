{
  "openapi": "3.0.0",
  "info": {
    "title": "Create Schematics REST API",
    "version": "0.1",
    "contact": {
      "name": "Create-Schematics",
      "url": "https://github.com/Create-Schematics"
    },
    "license": {
      "name": "MIT",
      "url": "https://github.com/Create-Schematics/Create-Schematics/blob/master/LICENSE"
    }
  },
  "servers": [
    {
      "url": "/api"
    }
  ],
  "tags": [],
  "paths": {
    "/auth/{provider}": {
      "get": {
        "parameters": [
          {
            "name": "provider",
            "schema": {
              "$ref": "#/components/schemas/OauthProvider"
            },
            "in": "path",
            "required": true,
            "deprecated": false,
            "explode": true
          }
        ],
        "responses": {
          "302": {
            "description": "",
            "headers": {
              "LOCATION": {
                "required": true,
                "deprecated": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        }
      }
    },
    "/auth/{provider}/callback": {
      "get": {
        "parameters": [
          {
            "name": "provider",
            "schema": {
              "$ref": "#/components/schemas/OauthProvider"
            },
            "in": "path",
            "required": true,
            "deprecated": false,
            "explode": true
          },
          {
            "name": "code",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "required": true,
            "deprecated": false,
            "explode": true
          }
        ],
        "responses": {
          "302": {
            "description": "",
            "headers": {
              "LOCATION": {
                "required": true,
                "deprecated": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        }
      }
    },
    "/v1/schematics/{schematic_id}/comments": {
      "get": {
        "summary": "Fetches a number of the comments on a schematic as well as some basic\nadditional information about their author such as their avatar url\nand usesrname to prevent the need for subsequent requests. By default\nif no limit for comments is set then up to 20 will be returned at a\ntime.",
        "description": "Note that comment bodies can contain markdown which will need to be\nhandled accordingly\n",
        "parameters": [
          {
            "name": "schematic_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "path",
            "required": true,
            "deprecated": false,
            "explode": true
          },
          {
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "in": "query",
            "required": false,
            "deprecated": false,
            "explode": true
          },
          {
            "name": "offset",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "in": "query",
            "required": false,
            "deprecated": false,
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FullComment"
                  }
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        }
      },
      "post": {
        "summary": "Uploads a comment to a given schematic for the current user returning\ninformation about the new comment including its id.",
        "description": "The comments body can contain markdown which will be sanitized\naccordingly, however it cannot contain profanity wich will result in\na `422 Conflict` being returned.\n\nIf you believe something is being falsely flagged as profanity please\ncontact us either on github or through other chanels provided in the\nopenapi spec.\n",
        "parameters": [
          {
            "name": "schematic_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "path",
            "required": true,
            "deprecated": false,
            "explode": true
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "comment_body"
                ],
                "properties": {
                  "comment_body": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        },
        "security": [
          {
            "Session": []
          }
        ]
      }
    },
    "/v1/comments/{comment_id}": {
      "get": {
        "summary": "Fetches a specific comment by it's id aswell as some additional\ninformation about it's author such as their username and avatar url\nto avoid subsequent requests.",
        "description": "Note the comemnts body can contain markdown which will need to be\ndisplayed accordingly to the user\n\nIf you are looking to fetch comments from a schematic see\n`GET /schematics/:id/comments`\n",
        "parameters": [
          {
            "name": "comment_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "path",
            "required": true,
            "deprecated": false,
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/FullComment"
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        }
      },
      "patch": {
        "summary": "Updates a given comment by its id, all fields are optional but at least\none is required to be present.",
        "description": "The new body can contain markdown but not profanity, if it is detected\nto be innapropriate then the reqeust will be denied with `422 Unprocessable\nEntity`\n\nThe current user must also own the comment even if they have permission to\nmoderate comments\n",
        "parameters": [
          {
            "name": "comment_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "path",
            "required": true,
            "deprecated": false,
            "explode": true
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment_body": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        },
        "security": [
          {
            "Session": []
          }
        ]
      },
      "delete": {
        "summary": "Removes a comment from a schematic by it's id, this requires for the\ncurrent user to either own the comment or have permission to moderate\ncomments\n",
        "parameters": [
          {
            "name": "comment_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "path",
            "required": true,
            "deprecated": false,
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        },
        "security": [
          {
            "Session": []
          }
        ]
      }
    },
    "/v1/schematics/{schematic_id}": {
      "get": {
        "summary": "Fetches a given schematic by it's id including some additional information\nabout it and it's author including like and dislike count, applied tags and\nthe authors username and avatar in order to reduce the need for subsequent\nrequests",
        "description": "If you are looking to search for schematics not for a specific one see\n`GET /api/v1/schematics`\n",
        "parameters": [
          {
            "name": "schematic_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "path",
            "required": true,
            "deprecated": false,
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/FullSchematic"
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        }
      },
      "patch": {
        "summary": "Updates a given schematic by it's id. All fields are optional but at\nleast one is required",
        "description": "If you are looking to add or remove images from a schematic see the\n`/api/v1/schematics/:id/images` endpoint and for schematic files see\nthe `/api/v1/schematics/:id/files` endpoint\n\nThis endpoint requires for the current user to either own the schematic\nor to have permission to moderate posts\n",
        "parameters": [
          {
            "name": "schematic_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "path",
            "required": true,
            "deprecated": false,
            "explode": true
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "schematic_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3
                  },
                  "game_version": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 1.0
                  },
                  "create_version": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 1.0
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Schematic"
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        },
        "security": [
          {
            "Session": []
          }
        ]
      },
      "delete": {
        "summary": "Removes an existing schematic by it's id as well as all attached data\nsuch as it's files, applied tags, likes and dislikes and entries within\ncollections",
        "description": "This endpoint requires for the current user to either own the schematic\nor to have permissiosn to moderate posts\n",
        "parameters": [
          {
            "name": "schematic_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "path",
            "required": true,
            "deprecated": false,
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        },
        "security": [
          {
            "Session": []
          }
        ]
      }
    },
    "/v1/schematics": {
      "get": {
        "summary": "Searches schematics returning a given number based on requested filters\nwith some additional information such as the like and dislike count, tags\npresent on a schematic and the authors username and avatar in order to\nreduce the need for subsequent requests",
        "description": "If tags are included in the query then only schematics with one or more of\nthe selected tags will be searched for.\n\nIf no limit is specified for the number of schematics to return it will\ndefault to 20\n",
        "parameters": [
          {
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "in": "query",
            "required": false,
            "deprecated": false,
            "explode": true
          },
          {
            "name": "offset",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "in": "query",
            "required": false,
            "deprecated": false,
            "explode": true
          },
          {
            "name": "tag_ids",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            },
            "in": "query",
            "required": false,
            "deprecated": false,
            "explode": true
          },
          {
            "name": "term",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "required": false,
            "deprecated": false,
            "explode": true
          },
          {
            "name": "sort",
            "schema": {
              "$ref": "#/components/schemas/SortBy"
            },
            "in": "query",
            "required": false,
            "deprecated": false,
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FullSchematic"
                  }
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        }
      },
      "post": {
        "summary": "Uploads a new schematic for the current user",
        "description": "Schematics must have at least one image and file if not the request will\nbe rejected with `400 Bad Request`. The file names will be preserved but\nwill be sanitized\n\nIf an invalid game version or create version is specfied a `422 Unprocessable\nEntity` error will be returned with a message describing the issue.\n",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "schematic_name",
                  "schematic_body",
                  "game_version",
                  "create_version",
                  "files",
                  "images"
                ],
                "properties": {
                  "schematic_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3
                  },
                  "schematic_body": {
                    "type": "string",
                    "maxLength": 2048
                  },
                  "game_version": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 1.0
                  },
                  "create_version": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 1.0
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  },
                  "images": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Schematic"
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        },
        "security": [
          {
            "Session": []
          }
        ]
      }
    },
    "/v1/schematics/{schematic_id}/like": {
      "get": {
        "summary": "Adds either a like or dislike reaction to a schematic by the current user.\nIf this user has already liked or disliked this schematic, their reaction\nwill be updated instead.",
        "description": "If you are looking to remove a like see the `DELETE /api/v1/schematics/:id/like`\n",
        "parameters": [
          {
            "name": "schematic_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "path",
            "required": true,
            "deprecated": false,
            "explode": true
          },
          {
            "name": "query",
            "schema": {
              "$ref": "#/components/schemas/LikeAction"
            },
            "in": "query",
            "required": true,
            "deprecated": false,
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        },
        "security": [
          {
            "Session": []
          }
        ]
      },
      "delete": {
        "summary": "Removes a like or dislike reaction from a schematic by the current user.",
        "description": "If the user hasnt already liked the schematic or a schematic with the given\nid doesnt exist then a `404 Not Found` error will be returned\n",
        "parameters": [
          {
            "name": "schematic_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "path",
            "required": true,
            "deprecated": false,
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        },
        "security": [
          {
            "Session": []
          }
        ]
      }
    },
    "/v1/users": {
      "get": {
        "summary": "Fetches information about the current user including their email\n",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentUser"
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        },
        "security": [
          {
            "Session": []
          }
        ]
      },
      "patch": {
        "summary": "Updates information about the current user. All fields are optional but\nat least one is required.",
        "description": "All usernames must be unique, if the requested new username is already\nused a `422 Unprocessable Entity` error will be returned\n",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentUser"
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        },
        "security": [
          {
            "Session": []
          }
        ]
      },
      "delete": {
        "summary": "Removes the current users account and invalidates any active sessions\naswell as removing the current session from their cookies.\n",
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        },
        "security": [
          {
            "Session": []
          }
        ]
      }
    },
    "/v1/users/{username}": {
      "get": {
        "summary": "Fetches a user by their username, for privacy their email will not be included\n",
        "parameters": [
          {
            "name": "username",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true,
            "deprecated": false,
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        }
      }
    },
    "/v1/users/{username}/schematics": {
      "get": {
        "summary": "Fetches a number of schematics created by the specified user. User\ninformation will not be included with the schematic as it is assumed\nthat this information is already known.",
        "description": "If a limit is not specified 20 will be fetched by default.\n",
        "parameters": [
          {
            "name": "username",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true,
            "deprecated": false,
            "explode": true
          },
          {
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "in": "query",
            "required": false,
            "deprecated": false,
            "explode": true
          },
          {
            "name": "offset",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "in": "query",
            "required": false,
            "deprecated": false,
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Schematic"
                  }
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        }
      }
    },
    "/v1/schematics/{schematic_id}/tags": {
      "get": {
        "summary": "Fetch all the tags applied to a given schematic",
        "description": "This also includes the name of each tag aswell as their underlying id\n",
        "parameters": [
          {
            "name": "schematic_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "path",
            "required": true,
            "deprecated": false,
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FullTag"
                  }
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        }
      }
    },
    "/v1/tags": {
      "get": {
        "summary": "Fetch a number of the valid tags available within the api aswell as their\ngiven names. If no limit is specified 20 will be returned by default.",
        "description": "If you are looking to get all of the tags on a specific schematic see\n`GET /api/v1/schematics/{id}/tags`\n",
        "parameters": [
          {
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "in": "query",
            "required": false,
            "deprecated": false,
            "explode": true
          },
          {
            "name": "offset",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "in": "query",
            "required": false,
            "deprecated": false,
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FullTag"
                  }
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        }
      }
    },
    "/v1/schematis/{schematic_id}/tags": {
      "post": {
        "summary": "Applies tags to a given schematic given their identifiers see\n`GET /api/v1/tags` for a full list of valid tags",
        "description": "This requires for the current user to be the schematics author\n",
        "parameters": [
          {
            "name": "schematic_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "path",
            "required": true,
            "deprecated": false,
            "explode": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Tags"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        },
        "security": [
          {
            "Session": []
          }
        ]
      },
      "delete": {
        "summary": "Removes tags from a given schematic given their identifiers",
        "description": "This requires for the current user to be the schematics author\n",
        "parameters": [
          {
            "name": "schematic_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "path",
            "required": true,
            "deprecated": false,
            "explode": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Tags"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        },
        "security": [
          {
            "Session": []
          }
        ]
      }
    },
    "/v1/schematics/{schematic_id}/collections": {
      "get": {
        "summary": "Fetches a number of collections that contain a given schematic including\nthe schematic ids of there entries and basic information about their\nauthor such as their username and avatar to avoid subsequent requests.",
        "description": "Note that private collections even if the user requesting them is the\nowner will not be returned from this endpoint.\n",
        "parameters": [
          {
            "name": "schematic_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "path",
            "required": true,
            "deprecated": false,
            "explode": true
          },
          {
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "in": "query",
            "required": false,
            "deprecated": false,
            "explode": true
          },
          {
            "name": "offset",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "in": "query",
            "required": false,
            "deprecated": false,
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FullCollection"
                  }
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        }
      }
    },
    "/v1/collections/{collection_id}": {
      "get": {
        "summary": "Fetches a collection by it's id asell as the ids of all the schematics\nit contains and some information about the author such as their username\nand avatar url.",
        "description": "If the requested collection is private and the user is not it's owner\nthen `404 Not Found` will be returned even if the collection does exist\nfor privacy\n",
        "parameters": [
          {
            "name": "collection_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "path",
            "required": true,
            "deprecated": false,
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/FullCollection"
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        },
        "security": [
          {
            "OptionalSession": []
          }
        ]
      },
      "patch": {
        "summary": "Updatess a given collection, all fields are optional but at least one is\nrequired as well as this the current user must either own the collection\nor have permissions to mdoerate posts to edit the collection.",
        "description": "If you are looking to add a schematic to add a schematic to the collection\nsee `POST /api/v1/collections/{id}/schematics`\n",
        "parameters": [
          {
            "name": "collection_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "path",
            "required": true,
            "deprecated": false,
            "explode": true
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "collection_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3
                  },
                  "is_private": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        },
        "security": [
          {
            "Session": []
          }
        ]
      },
      "delete": {
        "summary": "Removes a collection entirely aswell as all attached entries. This\nrequires for the current user to either own the collection or have\npermissions to moderate posts.",
        "description": "If you are looking to remove a specific schematic from a collection\nsee `DELETE /api/v1/collections/:id/schematics`\n",
        "parameters": [
          {
            "name": "collection_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "path",
            "required": true,
            "deprecated": false,
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        },
        "security": [
          {
            "Session": []
          }
        ]
      }
    },
    "/v1/users/{user_id}/collections": {
      "get": {
        "summary": "Fetches all public collections owned by a given user, this will include\nadditional information about each collection such as it's entries but\nwill not include information about the author",
        "description": "If you need to get all collections including private ones from a user\nrefer to `/api/v1/collections` which fetches collections owned by the\ncurrent user\n",
        "parameters": [
          {
            "name": "user_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "path",
            "required": true,
            "deprecated": false,
            "explode": true
          },
          {
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "in": "query",
            "required": false,
            "deprecated": false,
            "explode": true
          },
          {
            "name": "offset",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "in": "query",
            "required": false,
            "deprecated": false,
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserCollection"
                  }
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        }
      }
    },
    "/v1/collections": {
      "get": {
        "summary": "Fetches all collections, including private ones owned by the current\nuser, this will include all of a collections entries but will not\ninclude information about the owner of the user as it is assumed this\ninformation is already known.",
        "description": "If you need to get collections from another user refer to\n`GET /api/v1/users/{id}/collections`, this returns all the collections\nthat are public and owned by a given user\n",
        "parameters": [
          {
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "in": "query",
            "required": false,
            "deprecated": false,
            "explode": true
          },
          {
            "name": "offset",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "in": "query",
            "required": false,
            "deprecated": false,
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserCollection"
                  }
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        },
        "security": [
          {
            "Session": []
          }
        ]
      },
      "post": {
        "summary": "Creates a new collection for the current user with a given name and\nprivacy level, new collections will always be empty, aswell as this\nit is assumed information about the current user is already known and\nso will not be returned by the api.\n",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "collection_name",
                  "is_private"
                ],
                "properties": {
                  "collection_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3
                  },
                  "is_private": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Collection"
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        },
        "security": [
          {
            "Session": []
          }
        ]
      }
    },
    "/v1/collections/{collection_id}/schematics": {
      "get": {
        "summary": "Fetches the ids of all the schematics in a collection. If the given\ncollection is private then the current user must be it's owner. If the\nuser is now the owner of the collection they will recieve a\n`404 Not Found`, even if the given collection was found, for privacy.",
        "description": "If you are looking to fetch information about the collection itself\nsee `GET /collections/:id`\n",
        "parameters": [
          {
            "name": "collection_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "path",
            "required": true,
            "deprecated": false,
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CollectionEntry"
                  }
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        },
        "security": [
          {
            "OptionalSession": []
          }
        ]
      },
      "post": {
        "summary": "Adds a schematic to a collection, the current user must own the given\ncollection in order to add to it. The same schematic cannot be added to\na given colleciton twice, if the collection already contains the new\nschematic then a `409 Conflict` will be returned.\n",
        "parameters": [
          {
            "name": "collection_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "path",
            "required": true,
            "deprecated": false,
            "explode": true
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "schematic_id"
                ],
                "properties": {
                  "schematic_id": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        },
        "security": [
          {
            "Session": []
          }
        ]
      },
      "delete": {
        "summary": "Removes a given schematic from a colleciton, this requires the current\nuser to be the collections owner.",
        "description": "If you are looking to entirely remove a collection not just specific\nschematics within it see `DELETE /api/v1/collections/:id`\n",
        "parameters": [
          {
            "name": "collection_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "path",
            "required": true,
            "deprecated": false,
            "explode": true
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "schematic_id"
                ],
                "properties": {
                  "schematic_id": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        },
        "security": [
          {
            "Session": []
          }
        ]
      }
    },
    "/v1/schematics/{schematic_id}/images": {
      "get": {
        "summary": "Fetches the file names of all images associated with a given schematic",
        "description": "Note this does not return the image files themselves they can be\nretrieved from the static file endpoint here\n`GET /upload/schematics/{schematic_id}/images/{image_name}.{extension}`\n",
        "parameters": [
          {
            "name": "schematic_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "path",
            "required": true,
            "deprecated": false,
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Images"
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        }
      },
      "post": {
        "summary": "Uploads a new image to an existing schematic, for supported image formats\nsee the image crate as this is used to ensure that images are valid.",
        "description": "https://github.com/image-rs/image?tab=readme-ov-file#supported-image-formats\n\nFile names cannot overlap, if an image with a given name is already added\nto the schematic then the request will be rejected with a `409 Conflict`\nresponse.\n\nAswell as this file names cannot contain profanity if the file name is deemed\nto be profane the request will be rejected\n",
        "parameters": [
          {
            "name": "schematic_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "path",
            "required": true,
            "deprecated": false,
            "explode": true
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "image"
                ],
                "properties": {
                  "image": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        },
        "security": [
          {
            "Session": []
          }
        ]
      },
      "delete": {
        "summary": "Removes an image from a schematic",
        "description": "Each schematic must have at least one image so requests to remove the\nfinal one will be rejected with a `400 Bad Request` response.\n\nThis endpoint requires the user to either own the schematic or have\npermissions to moderate schematics.\n",
        "parameters": [
          {
            "name": "schematic_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "path",
            "required": true,
            "deprecated": false,
            "explode": true
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file_name"
                ],
                "properties": {
                  "file_name": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Images"
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        },
        "security": [
          {
            "Session": []
          }
        ]
      }
    },
    "/v1/schematics/{schematic_id}/files": {
      "get": {
        "summary": "Fetches the name of all uploaded schematic files on a given schematic",
        "description": "Note this does not return the schematic files themselves, they can be\nretrieved from the static file endpoint like so filling in the schematic\nid for the given schematic and file_name for one of the values returned\nhere `GET /upload/schematics/{schematic_id}/files/{file_name}.nbt`\n",
        "parameters": [
          {
            "name": "schematic_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "path",
            "required": true,
            "deprecated": false,
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Files"
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        }
      },
      "post": {
        "summary": "Uploads a new schematic file to a schematic, use this for schematics\nwith multiple variations or parts not for many entirely different\nschematics.",
        "description": "This requires for the current user to be the owner of the given schematic\nand for this file name (after sanitization) to not be used already. If\nthere are conflicting file names `422 Unprocessable Entity` will be returned\nwith a message explaining this\n",
        "parameters": [
          {
            "name": "schematic_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "path",
            "required": true,
            "deprecated": false,
            "explode": true
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        },
        "security": [
          {
            "Session": []
          }
        ]
      },
      "delete": {
        "summary": "Removes a schematic file from a schematic, at least one file must be\npresent at all times. Requests to remove the last file will result in\na `400 Bad Request` error",
        "description": "This requires the current to user to either own the schematic or have\npermissions to moderate schematics\n",
        "parameters": [
          {
            "name": "schematic_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "path",
            "required": true,
            "deprecated": false,
            "explode": true
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file_name"
                ],
                "properties": {
                  "file_name": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Files"
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "Return `422 Unprocessable Entity`\n\nThis also serializes the `errors` map provided to JSON\n",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EntityErrors"
                }
              }
            }
          },
          "500": {
            "description": "Return `500 Internal Server Error`\n\nThis should generally be called implicity by another\nerror see implementation bellow\n"
          }
        },
        "security": [
          {
            "Session": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Collection": {
        "type": "object",
        "required": [
          "collection_id",
          "collection_name",
          "user_id",
          "is_private"
        ],
        "properties": {
          "collection_id": {
            "type": "string",
            "format": "uuid"
          },
          "collection_name": {
            "type": "string"
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          },
          "is_private": {
            "type": "boolean"
          }
        }
      },
      "CollectionEntry": {
        "type": "object",
        "required": [
          "schematic_id"
        ],
        "properties": {
          "schematic_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "Comment": {
        "type": "object",
        "required": [
          "comment_id",
          "comment_author",
          "comment_body",
          "schematic_id"
        ],
        "properties": {
          "comment_id": {
            "type": "string",
            "format": "uuid"
          },
          "comment_author": {
            "type": "string",
            "format": "uuid"
          },
          "comment_body": {
            "type": "string"
          },
          "schematic_id": {
            "type": "string"
          }
        }
      },
      "CurrentUser": {
        "type": "object",
        "required": [
          "user_id",
          "username",
          "displayname",
          "role"
        ],
        "properties": {
          "user_id": {
            "type": "string",
            "format": "uuid"
          },
          "username": {
            "type": "string",
            "maxLength": 30,
            "minLength": 3
          },
          "displayname": {
            "type": "string",
            "maxLength": 30,
            "minLength": 3
          },
          "avatar": {
            "type": "string"
          },
          "about": {
            "type": "string",
            "maxLength": 256
          },
          "role": {
            "$ref": "#/components/schemas/Role"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "EntityErrors": {
        "type": "object",
        "required": [
          "errors"
        ],
        "properties": {
          "errors": {
            "type": "object",
            "description": "Structure to return unprocessable data in with the erroneous field\nas the key and the reason it cannot be handled in the value.\n\nIdeally we would use a Cow<'static, str> here to avoid unnessasery\ncloning of the strings but does not implement ParseFromJSON\n",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "Files": {
        "type": "object",
        "required": [
          "files"
        ],
        "properties": {
          "files": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 1
          }
        }
      },
      "FullCollection": {
        "type": "object",
        "required": [
          "collection_id",
          "collection_name",
          "is_private",
          "user_id",
          "username",
          "entries"
        ],
        "properties": {
          "collection_id": {
            "type": "string",
            "format": "uuid"
          },
          "collection_name": {
            "type": "string"
          },
          "is_private": {
            "type": "boolean"
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          },
          "username": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "entries": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      },
      "FullComment": {
        "type": "object",
        "required": [
          "comment_id",
          "comment_author",
          "comment_body",
          "schematic_id",
          "author_username"
        ],
        "properties": {
          "comment_id": {
            "type": "string",
            "format": "uuid"
          },
          "comment_author": {
            "type": "string",
            "format": "uuid"
          },
          "comment_body": {
            "type": "string"
          },
          "schematic_id": {
            "type": "string"
          },
          "author_username": {
            "type": "string"
          }
        }
      },
      "FullSchematic": {
        "type": "object",
        "required": [
          "schematic_id",
          "schematic_name",
          "body",
          "author",
          "author_displayname",
          "author_username",
          "like_count",
          "dislike_count",
          "downloads",
          "tags",
          "images",
          "files",
          "game_version_id",
          "game_version_name",
          "create_version_id",
          "create_version_name"
        ],
        "properties": {
          "schematic_id": {
            "type": "string"
          },
          "schematic_name": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "author": {
            "type": "string",
            "format": "uuid"
          },
          "author_displayname": {
            "type": "string"
          },
          "author_username": {
            "type": "string"
          },
          "author_avatar": {
            "type": "string"
          },
          "like_count": {
            "type": "integer",
            "format": "int64"
          },
          "dislike_count": {
            "type": "integer",
            "format": "int64"
          },
          "downloads": {
            "type": "integer",
            "format": "int64"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "files": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "game_version_id": {
            "type": "integer",
            "format": "int64"
          },
          "game_version_name": {
            "type": "string"
          },
          "create_version_id": {
            "type": "integer",
            "format": "int64"
          },
          "create_version_name": {
            "type": "string"
          }
        }
      },
      "FullTag": {
        "type": "object",
        "required": [
          "tag_id",
          "tag_name"
        ],
        "properties": {
          "tag_id": {
            "type": "integer",
            "format": "int64"
          },
          "tag_name": {
            "type": "string"
          }
        }
      },
      "Images": {
        "type": "object",
        "required": [
          "images"
        ],
        "properties": {
          "images": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "LikeAction": {
        "type": "string",
        "enum": [
          "Like",
          "Dislike"
        ]
      },
      "OauthProvider": {
        "type": "string",
        "enum": [
          "github",
          "microsoft",
          "google",
          "discord"
        ]
      },
      "Role": {
        "type": "string",
        "enum": [
          "User",
          "Moderator",
          "Administrator"
        ]
      },
      "Schematic": {
        "type": "object",
        "required": [
          "schematic_id",
          "body",
          "schematic_name",
          "game_version_id",
          "create_version_id",
          "author",
          "images",
          "files",
          "downloads"
        ],
        "properties": {
          "schematic_id": {
            "type": "string",
            "format": "uuid"
          },
          "body": {
            "type": "string"
          },
          "schematic_name": {
            "type": "string"
          },
          "game_version_id": {
            "type": "integer",
            "format": "int32"
          },
          "create_version_id": {
            "type": "integer",
            "format": "int32"
          },
          "author": {
            "type": "string",
            "format": "uuid"
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "files": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "downloads": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "SortBy": {
        "type": "string",
        "enum": [
          "Downloads",
          "Likes",
          "CreatedAt"
        ]
      },
      "Tags": {
        "type": "object",
        "required": [
          "tag_names"
        ],
        "properties": {
          "tag_names": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "UpdateUser": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "maxLength": 30,
            "minLength": 3
          },
          "displayname": {
            "type": "string",
            "maxLength": 30,
            "minLength": 3
          },
          "about": {
            "type": "string",
            "maxLength": 256
          },
          "avatar_url": {
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "required": [
          "user_id",
          "username",
          "displayname",
          "role"
        ],
        "properties": {
          "user_id": {
            "type": "string",
            "format": "uuid"
          },
          "username": {
            "type": "string"
          },
          "displayname": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "about": {
            "type": "string"
          },
          "role": {
            "$ref": "#/components/schemas/Role"
          }
        }
      },
      "UserCollection": {
        "type": "object",
        "required": [
          "collection_id",
          "collection_name",
          "is_private",
          "entries"
        ],
        "properties": {
          "collection_id": {
            "type": "string",
            "format": "uuid"
          },
          "collection_name": {
            "type": "string"
          },
          "is_private": {
            "type": "boolean"
          },
          "entries": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "OptionalSession": {
        "type": "apiKey",
        "name": "session",
        "in": "cookie"
      },
      "Session": {
        "type": "apiKey",
        "name": "session",
        "in": "cookie"
      }
    }
  },
  "externalDocs": {
    "url": "https://github.com/Create-Schematics/Create-Schematics"
  }
}