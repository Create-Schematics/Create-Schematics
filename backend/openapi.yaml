openapi: 3.0.0
info:
  title: Create Schematics REST API
  version: '0.1'
  contact:
    name: Create-Schematics
    url: https://github.com/Create-Schematics
  license:
    name: MIT
    url: https://github.com/Create-Schematics/Create-Schematics/blob/master/LICENSE
servers:
- url: /api
tags: []
paths:
  /auth/{provider}:
    get:
      parameters:
      - name: provider
        schema:
          $ref: '#/components/schemas/OauthProvider'
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '302':
          description: ''
          headers:
            LOCATION:
              required: true
              deprecated: false
              schema:
                type: string
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
  /auth/{provider}/callback:
    get:
      parameters:
      - name: provider
        schema:
          $ref: '#/components/schemas/OauthProvider'
        in: path
        required: true
        deprecated: false
        explode: true
      - name: code
        schema:
          type: string
        in: query
        required: true
        deprecated: false
        explode: true
      responses:
        '302':
          description: ''
          headers:
            LOCATION:
              required: true
              deprecated: false
              schema:
                type: string
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
  /auth/refresh:
    post:
      responses:
        '200':
          description: ''
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
  /auth/logout:
    post:
      responses:
        '200':
          description: ''
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
  /v1/users:
    get:
      summary: |
        Fetches information about the current user including their email
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/CurrentUser'
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
      security:
      - Session: []
    patch:
      summary: |-
        Updates information about the current user. All fields are optional but
        at least one is required.
      description: |
        All usernames must be unique, if the requested new username is already
        used a `422 Unprocessable Entity` error will be returned
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/UpdateUser'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/CurrentUser'
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
      security:
      - Session: []
    delete:
      summary: |
        Removes the current users account and invalidates any active sessions
        aswell as removing the current session from their cookies.
      responses:
        '200':
          description: ''
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
      security:
      - Session: []
  /v1/users/{username}:
    get:
      summary: |
        Fetches a user by their username, for privacy their email will not be included
      parameters:
      - name: username
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
  /v1/users/{username}/schematics:
    get:
      summary: |-
        Fetches a number of schematics created by the specified user. User
        information will not be included with the schematic as it is assumed
        that this information is already known.
      description: |
        If a limit is not specified 20 will be fetched by default.
      parameters:
      - name: username
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      - name: limit
        schema:
          type: integer
          format: int64
        in: query
        required: false
        deprecated: false
        explode: true
      - name: offset
        schema:
          type: integer
          format: int64
        in: query
        required: false
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schematic'
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
  /v1/schematics/{schematic_id}:
    get:
      summary: |-
        Fetches a given schematic by it's id including some additional information
        about it and it's author including like and dislike count, applied tags and
        the authors username and avatar in order to reduce the need for subsequent
        requests
      description: |
        If you are looking to search for schematics not for a specific one see
        `GET /api/v1/schematics`
      parameters:
      - name: schematic_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/FullSchematic'
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
    patch:
      summary: |-
        Updates a given schematic by it's id. All fields are optional but at
        least one is required
      description: |
        If you are looking to add or remove images from a schematic see the
        `/api/v1/schematics/:id/images` endpoint and for schematic files see
        the `/api/v1/schematics/:id/files` endpoint

        This endpoint requires for the current user to either own the schematic
        or to have permission to moderate posts
      parameters:
      - name: schematic_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                schematic_name:
                  type: string
                  maxLength: 50
                  minLength: 3
                schematic_body:
                  type: string
                  maxLength: 2048
                game_version:
                  type: integer
                  format: int32
                  minimum: 1.0
                create_version:
                  type: integer
                  format: int32
                  minimum: 1.0
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Schematic'
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
      security:
      - Session: []
    delete:
      summary: |-
        Removes an existing schematic by it's id as well as all attached data
        such as it's files, applied tags, likes and dislikes and entries within
        collections
      description: |
        This endpoint requires for the current user to either own the schematic
        or to have permissiosn to moderate posts
      parameters:
      - name: schematic_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
      security:
      - Session: []
  /v1/schematics:
    get:
      summary: |-
        Searches schematics returning a given number based on requested filters
        with some additional information such as the like and dislike count, tags
        present on a schematic and the authors username and avatar in order to
        reduce the need for subsequent requests
      description: |
        If tags are included in the query then only schematics with one or more of
        the selected tags will be searched for.

        If no limit is specified for the number of schematics to return it will
        default to 20
      parameters:
      - name: limit
        schema:
          type: integer
          format: int64
        in: query
        required: false
        deprecated: false
        explode: true
      - name: offset
        schema:
          type: integer
          format: int64
        in: query
        required: false
        deprecated: false
        explode: true
      - name: tag_ids
        schema:
          type: array
          items:
            type: integer
            format: int64
        in: query
        required: false
        deprecated: false
        explode: true
      - name: term
        schema:
          type: string
        in: query
        required: false
        deprecated: false
        explode: true
      - name: sort
        schema:
          $ref: '#/components/schemas/SortBy'
        in: query
        required: false
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FullSchematic'
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
    post:
      summary: Uploads a new schematic for the current user
      description: |
        Schematics must have at least one image and file if not the request will
        be rejected with `400 Bad Request`. The file names will be preserved but
        will be sanitized

        If an invalid game version or create version is specfied a `422 Unprocessable
        Entity` error will be returned with a message describing the issue.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
              - schematic_name
              - schematic_body
              - game_version
              - create_version
              - tags
              - files
              - images
              properties:
                schematic_name:
                  type: string
                  maxLength: 50
                  minLength: 3
                schematic_body:
                  type: string
                  maxLength: 2048
                game_version:
                  type: integer
                  format: int32
                  minimum: 1.0
                create_version:
                  type: integer
                  format: int32
                  minimum: 1.0
                tags:
                  type: array
                  items:
                    type: string
                    maxLength: 10
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                images:
                  type: array
                  items:
                    type: string
                    format: binary
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Schematic'
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
      security:
      - Session: []
  /v1/schematics/{schematic_id}/like:
    get:
      summary: |-
        Adds either a like or dislike reaction to a schematic by the current user.
        If this user has already liked or disliked this schematic, their reaction
        will be updated instead.
      description: |
        If you are looking to remove a like see the `DELETE /api/v1/schematics/:id/like`
      parameters:
      - name: schematic_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: query
        schema:
          $ref: '#/components/schemas/LikeAction'
        in: query
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
      security:
      - Session: []
    delete:
      summary: Removes a like or dislike reaction from a schematic by the current user.
      description: |
        If the user hasnt already liked the schematic or a schematic with the given
        id doesnt exist then a `404 Not Found` error will be returned
      parameters:
      - name: schematic_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
      security:
      - Session: []
  /v1/schematics/{schematic_id}/comments:
    get:
      summary: |-
        Fetches a number of the comments on a schematic as well as some basic
        additional information about their author such as their avatar url
        and usesrname to prevent the need for subsequent requests. By default
        if no limit for comments is set then up to 20 will be returned at a
        time.
      description: |
        Note that comment bodies can contain markdown which will need to be
        handled accordingly
      parameters:
      - name: schematic_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: limit
        schema:
          type: integer
          format: int64
        in: query
        required: false
        deprecated: false
        explode: true
      - name: offset
        schema:
          type: integer
          format: int64
        in: query
        required: false
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FullComment'
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
    post:
      summary: |-
        Uploads a comment to a given schematic for the current user returning
        information about the new comment including its id.
      description: |
        The comments body can contain markdown which will be sanitized
        accordingly, however it cannot contain profanity wich will result in
        a `422 Conflict` being returned.

        If you believe something is being falsely flagged as profanity please
        contact us either on github or through other chanels provided in the
        openapi spec.
      parameters:
      - name: schematic_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
              - comment_body
              properties:
                comment_body:
                  type: string
                  maxLength: 1024
                parent:
                  type: string
                  format: uuid
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
      security:
      - Session: []
  /v1/comments/{comment_id}:
    get:
      summary: |-
        Fetches a specific comment by it's id aswell as some additional
        information about it's author such as their username and avatar url
        to avoid subsequent requests.
      description: |
        Note the comemnts body can contain markdown which will need to be
        displayed accordingly to the user

        If you are looking to fetch comments from a schematic see
        `GET /schematics/:id/comments`
      parameters:
      - name: comment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/FullComment'
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
    patch:
      summary: |-
        Updates a given comment by its id, all fields are optional but at least
        one is required to be present.
      description: |
        The new body can contain markdown but not profanity, if it is detected
        to be innapropriate then the reqeust will be denied with `422 Unprocessable
        Entity`

        The current user must also own the comment even if they have permission to
        moderate comments
      parameters:
      - name: comment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                comment_body:
                  type: string
                  maxLength: 1024
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
      security:
      - Session: []
    delete:
      summary: |
        Removes a comment from a schematic by it's id, this requires for the
        current user to either own the comment or have permission to moderate
        comments
      parameters:
      - name: comment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
      security:
      - Session: []
  /v1/schematics/{schematic_id}/files:
    get:
      summary: Fetches the name of all uploaded schematic files on a given schematic
      description: |
        Note this does not return the schematic files themselves, they can be
        retrieved from the static file endpoint like so filling in the schematic
        id for the given schematic and file_name for one of the values returned
        here `GET /upload/schematics/{schematic_id}/files/{file_name}.nbt`
      parameters:
      - name: schematic_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Files'
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
    post:
      summary: |-
        Uploads a new schematic file to a schematic, use this for schematics
        with multiple variations or parts not for many entirely different
        schematics.
      description: |
        This requires for the current user to be the owner of the given schematic
        and for this file name (after sanitization) to not be used already. If
        there are conflicting file names `422 Unprocessable Entity` will be returned
        with a message explaining this
      parameters:
      - name: schematic_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
              - file
              properties:
                file:
                  type: string
                  format: binary
        required: true
      responses:
        '200':
          description: ''
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
      security:
      - Session: []
    delete:
      summary: |-
        Removes a schematic file from a schematic, at least one file must be
        present at all times. Requests to remove the last file will result in
        a `400 Bad Request` error
      description: |
        This requires the current to user to either own the schematic or have
        permissions to moderate schematics
      parameters:
      - name: schematic_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
              - file_name
              properties:
                file_name:
                  type: string
        required: true
      responses:
        '200':
          description: ''
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
      security:
      - Session: []
  /v1/schematics/{schematic_id}/images:
    get:
      summary: Fetches the file names of all images associated with a given schematic
      description: |
        Note this does not return the image files themselves they can be
        retrieved from the static file endpoint here
        `GET /upload/schematics/{schematic_id}/images/{image_name}.{extension}`
      parameters:
      - name: schematic_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Images'
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
    post:
      summary: |-
        Uploads a new image to an existing schematic, for supported image formats
        see the image crate as this is used to ensure that images are valid.
      description: |
        https://github.com/image-rs/image?tab=readme-ov-file#supported-image-formats

        File names cannot overlap, if an image with a given name is already added
        to the schematic then the request will be rejected with a `409 Conflict`
        response.

        Aswell as this file names cannot contain profanity if the file name is deemed
        to be profane the request will be rejected
      parameters:
      - name: schematic_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
              - image
              properties:
                image:
                  type: string
                  format: binary
        required: true
      responses:
        '200':
          description: ''
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
      security:
      - Session: []
    delete:
      summary: Removes an image from a schematic
      description: |
        Each schematic must have at least one image so requests to remove the
        final one will be rejected with a `400 Bad Request` response.

        This endpoint requires the user to either own the schematic or have
        permissions to moderate schematics.
      parameters:
      - name: schematic_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
              - file_name
              properties:
                file_name:
                  type: string
        required: true
      responses:
        '200':
          description: ''
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
      security:
      - Session: []
  /v1/schematics/{schematic_id}/tags:
    get:
      summary: Fetch all the tags applied to a given schematic
      description: |
        This also includes the name of each tag aswell as their underlying id
      parameters:
      - name: schematic_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FullTag'
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
  /v1/tags:
    get:
      summary: |-
        Fetch a number of the valid tags available within the api aswell as their
        given names. If no limit is specified 20 will be returned by default.
      description: |
        If you are looking to get all of the tags on a specific schematic see
        `GET /api/v1/schematics/{id}/tags`
      parameters:
      - name: limit
        schema:
          type: integer
          format: int64
        in: query
        required: false
        deprecated: false
        explode: true
      - name: offset
        schema:
          type: integer
          format: int64
        in: query
        required: false
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FullTag'
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
  /v1/schematis/{schematic_id}/tags:
    post:
      summary: |-
        Applies tags to a given schematic given their identifiers see
        `GET /api/v1/tags` for a full list of valid tags
      description: |
        This requires for the current user to be the schematics author
      parameters:
      - name: schematic_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/Tags'
        required: true
      responses:
        '200':
          description: ''
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
      security:
      - Session: []
    delete:
      summary: Removes tags from a given schematic given their identifiers
      description: |
        This requires for the current user to be the schematics author
      parameters:
      - name: schematic_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/Tag'
        required: true
      responses:
        '200':
          description: ''
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
      security:
      - Session: []
  /v1/schematics/{schematic_id}/collections:
    get:
      summary: |-
        Fetches a number of collections that contain a given schematic including
        the schematic ids of there entries and basic information about their
        author such as their username and avatar to avoid subsequent requests.
      description: |
        Note that private collections even if the user requesting them is the
        owner will not be returned from this endpoint.
      parameters:
      - name: schematic_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: limit
        schema:
          type: integer
          format: int64
        in: query
        required: false
        deprecated: false
        explode: true
      - name: offset
        schema:
          type: integer
          format: int64
        in: query
        required: false
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FullCollection'
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
  /v1/collections/{collection_id}:
    get:
      summary: |-
        Fetches a collection by it's id asell as the ids of all the schematics
        it contains and some information about the author such as their username
        and avatar url.
      description: |
        If the requested collection is private and the user is not it's owner
        then `404 Not Found` will be returned even if the collection does exist
        for privacy
      parameters:
      - name: collection_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/FullCollection'
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
      security:
      - OptionalSession: []
    patch:
      summary: |-
        Updatess a given collection, all fields are optional but at least one is
        required as well as this the current user must either own the collection
        or have permissions to mdoerate posts to edit the collection.
      description: |
        If you are looking to add a schematic to add a schematic to the collection
        see `POST /api/v1/collections/{id}/schematics`
      parameters:
      - name: collection_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                is_private:
                  type: boolean
                collection_name:
                  type: string
                  maxLength: 50
                  minLength: 3
        required: true
      responses:
        '200':
          description: ''
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
      security:
      - Session: []
    delete:
      summary: |-
        Removes a collection entirely aswell as all attached entries. This
        requires for the current user to either own the collection or have
        permissions to moderate posts.
      description: |
        If you are looking to remove a specific schematic from a collection
        see `DELETE /api/v1/collections/:id/schematics`
      parameters:
      - name: collection_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
      security:
      - Session: []
  /v1/users/{username}/collections:
    get:
      summary: |-
        Fetches all public collections owned by a given user, this will include
        additional information about each collection such as it's entries but
        will not include information about the author
      description: |
        If you need to get all collections including private ones from a user
        refer to `/api/v1/collections` which fetches collections owned by the
        current user
      parameters:
      - name: username
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      - name: limit
        schema:
          type: integer
          format: int64
        in: query
        required: false
        deprecated: false
        explode: true
      - name: offset
        schema:
          type: integer
          format: int64
        in: query
        required: false
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserCollection'
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
  /v1/collections:
    get:
      summary: |-
        Fetches all collections, including private ones owned by the current
        user, this will include all of a collections entries but will not
        include information about the owner of the user as it is assumed this
        information is already known.
      description: |
        If you need to get collections from another user refer to
        `GET /api/v1/users/{id}/collections`, this returns all the collections
        that are public and owned by a given user
      parameters:
      - name: limit
        schema:
          type: integer
          format: int64
        in: query
        required: false
        deprecated: false
        explode: true
      - name: offset
        schema:
          type: integer
          format: int64
        in: query
        required: false
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserCollection'
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
      security:
      - Session: []
    post:
      summary: |
        Creates a new collection for the current user with a given name and
        privacy level, new collections will always be empty, aswell as this
        it is assumed information about the current user is already known and
        so will not be returned by the api.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
              - is_private
              - collection_name
              properties:
                is_private:
                  type: boolean
                collection_name:
                  type: string
                  maxLength: 50
                  minLength: 3
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Collection'
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
      security:
      - Session: []
  /v1/collections/{collection_id}/schematics:
    get:
      summary: |-
        Fetches the ids of all the schematics in a collection. If the given
        collection is private then the current user must be it's owner. If the
        user is now the owner of the collection they will recieve a
        `404 Not Found`, even if the given collection was found, for privacy.
      description: |
        If you are looking to fetch information about the collection itself
        see `GET /collections/:id`
      parameters:
      - name: collection_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CollectionEntry'
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
      security:
      - OptionalSession: []
    post:
      summary: |
        Adds a schematic to a collection, the current user must own the given
        collection in order to add to it. The same schematic cannot be added to
        a given colleciton twice, if the collection already contains the new
        schematic then a `409 Conflict` will be returned.
      parameters:
      - name: collection_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
              - created_at
              - schematic_id
              properties:
                created_at:
                  type: string
                  format: date-time
                schematic_id:
                  type: string
                  format: uuid
        required: true
      responses:
        '200':
          description: ''
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
      security:
      - Session: []
    delete:
      summary: |-
        Removes a given schematic from a colleciton, this requires the current
        user to be the collections owner.
      description: |
        If you are looking to entirely remove a collection not just specific
        schematics within it see `DELETE /api/v1/collections/:id`
      parameters:
      - name: collection_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
              - created_at
              - schematic_id
              properties:
                created_at:
                  type: string
                  format: date-time
                schematic_id:
                  type: string
                  format: uuid
        required: true
      responses:
        '200':
          description: ''
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
      security:
      - Session: []
  /v1/mods/{mod_id}:
    get:
      parameters:
      - name: mod_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Mod'
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
    patch:
      parameters:
      - name: mod_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                mod_slug:
                  type: string
                mod_name:
                  type: string
                curseforge_slug:
                  type: integer
                  format: int32
                modrinth_slug:
                  type: string
        required: true
      responses:
        '200':
          description: ''
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
      security:
      - Session: []
  /v1/mods/proposals:
    get:
      parameters:
      - name: limit
        schema:
          type: integer
          format: int64
          maximum: 50.0
        in: query
        required: false
        deprecated: false
        explode: true
      - name: offset
        schema:
          type: integer
          format: int64
        in: query
        required: false
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ModProposal'
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
      security:
      - Session: []
  /v1/mods/proposals/{proposal_id}:
    get:
      parameters:
      - name: proposal_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ModProposal'
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
      security:
      - Session: []
  /v1/mods/proposals/{proposal_id}/approve:
    put:
      parameters:
      - name: proposal_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
      security:
      - Session: []
  /v1/mods/proposals/{proposal_id}/reject:
    put:
      parameters:
      - name: proposal_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
      security:
      - Session: []
  /v1/users/{username}/timeout:
    get:
      parameters:
      - name: username
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Timeout'
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
    put:
      parameters:
      - name: username
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                duration:
                  type: integer
                  format: uint64
                reason:
                  type: string
        required: true
      responses:
        '200':
          description: ''
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
      security:
      - Session: []
  /v1/timeout/{punishment_id}:
    get:
      parameters:
      - name: punishment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Timeout'
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
    delete:
      parameters:
      - name: punishment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
      security:
      - Session: []
  /v1/reports:
    get:
      parameters:
      - name: limit
        schema:
          type: integer
          format: int64
          maximum: 50.0
        in: query
        required: false
        deprecated: false
        explode: true
      - name: offset
        schema:
          type: integer
          format: int64
        in: query
        required: false
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FullReport'
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
      security:
      - Session: []
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
              - schematic_id
              properties:
                schematic_id:
                  type: string
                  format: uuid
                body:
                  type: string
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Report'
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
      security:
      - Session: []
  /v1/reports/{report_id}:
    get:
      parameters:
      - name: report_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/FullReport'
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
      security:
      - Session: []
  /v1/reports/created:
    get:
      parameters:
      - name: limit
        schema:
          type: integer
          format: int64
          maximum: 50.0
        in: query
        required: false
        deprecated: false
        explode: true
      - name: offset
        schema:
          type: integer
          format: int64
        in: query
        required: false
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FullReport'
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
      security:
      - Session: []
  /v1/reports/{report_id}/approve:
    put:
      parameters:
      - name: report_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
      security:
      - Session: []
  /v1/reports/{report_id}/reject:
    put:
      parameters:
      - name: report_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '403':
          description: |-
            Return `403 Forbidden`, for when the user may have a valid
            session and permissions but has an active timeout, returning
            how long it is for and the reason why. If the duration is
            not given then the timeout is permanent
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Punishment'
        '404':
          description: ''
        '422':
          description: |
            Return `422 Unprocessable Entity`

            This also serializes the `errors` map provided to JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EntityErrors'
        '500':
          description: |
            Return `500 Internal Server Error`

            This should generally be called implicity by another
            error see implementation bellow
      security:
      - Session: []
components:
  schemas:
    Collection:
      type: object
      required:
      - collection_id
      - collection_name
      - user_id
      - is_private
      - created_at
      properties:
        collection_id:
          type: string
          format: uuid
        collection_name:
          type: string
        user_id:
          type: string
          format: uuid
        is_private:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    CollectionEntry:
      type: object
      required:
      - created_at
      - schematic_id
      properties:
        created_at:
          type: string
          format: date-time
        schematic_id:
          type: string
          format: uuid
    Comment:
      type: object
      required:
      - comment_id
      - comment_author
      - comment_body
      - schematic_id
      - created_at
      properties:
        comment_id:
          type: string
          format: uuid
        parent:
          type: string
          format: uuid
        comment_author:
          type: string
          format: uuid
        comment_body:
          type: string
        schematic_id:
          type: string
        updated_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
    CurrentUser:
      type: object
      required:
      - user_id
      - username
      - displayname
      - role
      - created_at
      properties:
        user_id:
          type: string
          format: uuid
        username:
          type: string
          maxLength: 30
          minLength: 3
        displayname:
          type: string
          maxLength: 30
          minLength: 3
        avatar:
          type: string
        about:
          type: string
          maxLength: 256
        role:
          $ref: '#/components/schemas/Role'
        email:
          type: string
        updated_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
    EntityErrors:
      type: object
      required:
      - errors
      properties:
        errors:
          type: object
          description: |
            Structure to return unprocessable data in with the erroneous field
            as the key and the reason it cannot be handled in the value.

            Ideally we would use a Cow<'static, str> here to avoid unnessasery
            cloning of the strings but does not implement ParseFromJSON
          additionalProperties:
            type: array
            items:
              type: string
    Files:
      type: object
      required:
      - files
      properties:
        files:
          type: array
          items:
            type: string
          minItems: 1
    FullCollection:
      type: object
      required:
      - collection_id
      - collection_name
      - is_private
      - user_id
      - username
      - entries
      - created_at
      properties:
        collection_id:
          type: string
          format: uuid
        collection_name:
          type: string
        is_private:
          type: boolean
        user_id:
          type: string
          format: uuid
        username:
          type: string
        avatar:
          type: string
        entries:
          type: array
          items:
            type: string
            format: uuid
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    FullComment:
      type: object
      required:
      - comment_id
      - comment_author
      - comment_body
      - schematic_id
      - author_username
      - created_at
      properties:
        comment_id:
          type: string
          format: uuid
        parent:
          type: string
          format: uuid
        comment_author:
          type: string
          format: uuid
        comment_body:
          type: string
        schematic_id:
          type: string
        author_username:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    FullReport:
      type: object
      required:
      - report_id
      - user_id
      - username
      - schematic_id
      - schematic_name
      - created_at
      properties:
        report_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        username:
          type: string
        displayname:
          type: string
        schematic_id:
          type: string
          format: uuid
        schematic_name:
          type: string
        body:
          type: string
        created_at:
          type: string
          format: date-time
    FullSchematic:
      type: object
      required:
      - schematic_id
      - schematic_name
      - body
      - author
      - author_displayname
      - author_username
      - like_count
      - dislike_count
      - downloads
      - tags
      - images
      - game_version_id
      - game_version_name
      - create_version_id
      - create_version_name
      - created_at
      properties:
        schematic_id:
          type: string
        schematic_name:
          type: string
        body:
          type: string
        author:
          type: string
          format: uuid
        author_displayname:
          type: string
        author_username:
          type: string
        author_avatar:
          type: string
        like_count:
          type: integer
          format: int64
        dislike_count:
          type: integer
          format: int64
        downloads:
          type: integer
          format: int64
        tags:
          type: array
          items:
            type: integer
            format: int64
        images:
          type: array
          items:
            type: string
        game_version_id:
          type: integer
          format: int64
        game_version_name:
          type: string
        create_version_id:
          type: integer
          format: int64
        create_version_name:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    FullTag:
      type: object
      required:
      - tag_id
      - tag_name
      properties:
        tag_id:
          type: integer
          format: int64
        tag_name:
          type: string
    Images:
      type: object
      required:
      - images
      properties:
        images:
          type: array
          items:
            type: string
    LikeAction:
      type: string
      enum:
      - Like
      - Dislike
    Mod:
      type: object
      required:
      - mod_id
      - mod_slug
      properties:
        mod_id:
          type: string
          format: uuid
        mod_slug:
          type: string
        mod_name:
          type: string
        curseforge_slug:
          type: integer
          format: int32
        modrinth_slug:
          type: string
    ModProposal:
      type: object
      required:
      - proposal_id
      - user_id
      - mod_id
      properties:
        proposal_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        mod_id:
          type: string
          format: uuid
        mod_name:
          type: string
        mod_slug:
          type: string
        curseforge_slug:
          type: integer
          format: int32
        modrinth_slug:
          type: string
    OauthProvider:
      type: string
      enum:
      - github
      - microsoft
      - google
      - discord
      - modrinth
    Punishment:
      type: object
      properties:
        until:
          type: string
          format: date-time
        reason:
          type: string
    Report:
      type: object
      required:
      - report_id
      - user_id
      - schematic_id
      - created_at
      properties:
        report_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        schematic_id:
          type: string
          format: uuid
        body:
          type: string
        created_at:
          type: string
          format: date-time
    Role:
      type: string
      enum:
      - User
      - Moderator
      - Administrator
    Schematic:
      type: object
      required:
      - schematic_id
      - body
      - schematic_name
      - game_version_id
      - create_version_id
      - author
      - images
      - downloads
      - created_at
      properties:
        schematic_id:
          type: string
          format: uuid
        body:
          type: string
        schematic_name:
          type: string
        game_version_id:
          type: integer
          format: int32
        create_version_id:
          type: integer
          format: int32
        author:
          type: string
          format: uuid
        images:
          type: array
          items:
            type: string
        downloads:
          type: integer
          format: int64
        updated_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
    SortBy:
      type: string
      enum:
      - Downloads
      - Likes
      - CreatedAt
    Tag:
      type: object
      required:
      - tag_name
      properties:
        tag_name:
          type: string
    Tags:
      type: object
      required:
      - tag_names
      properties:
        tag_names:
          type: array
          items:
            type: string
    Timeout:
      type: object
      required:
      - punishment_id
      - user_id
      - username
      - issuer_id
      - issuer_username
      - created_at
      properties:
        punishment_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        username:
          type: string
        displayname:
          type: string
        issuer_id:
          type: string
          format: uuid
        issuer_username:
          type: string
        issuer_displayname:
          type: string
        reason:
          type: string
        until:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
    UpdateUser:
      type: object
      properties:
        username:
          type: string
          maxLength: 30
          minLength: 3
        displayname:
          type: string
          maxLength: 30
          minLength: 3
        about:
          type: string
          maxLength: 256
        avatar_url:
          type: string
    User:
      type: object
      required:
      - user_id
      - username
      - displayname
      - role
      - created_at
      properties:
        user_id:
          type: string
          format: uuid
        username:
          type: string
        displayname:
          type: string
        avatar:
          type: string
        about:
          type: string
        role:
          $ref: '#/components/schemas/Role'
        updated_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
    UserCollection:
      type: object
      required:
      - collection_id
      - collection_name
      - is_private
      - entries
      - created_at
      properties:
        collection_id:
          type: string
          format: uuid
        collection_name:
          type: string
        is_private:
          type: boolean
        entries:
          type: array
          items:
            type: string
            format: uuid
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
  securitySchemes:
    OptionalSession:
      type: apiKey
      name: session
      in: cookie
    Session:
      type: apiKey
      name: session
      in: cookie
externalDocs:
  url: https://github.com/Create-Schematics/Create-Schematics
